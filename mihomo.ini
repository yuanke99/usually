# 出站策略
pr: &pr {type: select,  proxies: [🚀节点选择, ♻️自动选择, 🌍Cloudflare节点, 🌍Reality节点, 🌍Tuic5节点, 🌍Hy2节点]}
proxy-groups:
#  - {name: 🇭🇰香港节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(香港|HK|HKG|(?i)Hong))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
# - {name: 🇨🇳台湾节点, type: url-test, include-all: true , tolerance: 30, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
# - {name: 🇸🇬新加坡节点, type: url-test, include-all: true , tolerance: 30, interval: 300, filter: "(?=.*(🇸🇬|新加坡|坡|狮城|SG|(?i)Singapore))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
# - {name: 🇯🇵日本节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇯🇵|NRT|日本|东京|大阪|泉日|埼玉|JP|(?i)Japan))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
# - {name: 🇰🇷韩国节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇰🇷|ICN|首尔|韩国))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇺🇲美国节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇺🇲|SEA|西雅图|LAX|洛杉矶|SJC|圣何塞|US))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇨🇦加拿大, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇨🇦|温哥华|蒙特利尔|YYZ|YVR))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇦🇺澳大利亚, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇷🇺俄罗斯, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(🇨🇳|TPE|台北|台湾))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇵🇱Serv00, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(s14|s16))^((?!(hy2|reality)).)*$", udp= true}
#  - {name: 🇵🇱Serv15, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(s15))^((?!(hy2|reality)).)*$", udp= true}
#  - {name: 🇪🇺欧洲节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(FRA|法兰克福|法国|米兰|德国|马赛|波兰|巴黎|荷兰|英国))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
  - {name: 🌍Cloudflare节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(CF|WebHost))^((?!(Raksmart|Euserv|Frog|Freecloud|Hax|Virtnet|Legend)).)*$", udp= true}
#  - {name: 🇫🇮Frog节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Frog))^((?!(hy2|reality|tu5)).)*$", udp= true}
#  - {name: 🇩🇪Euserv节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Euserv))^((?!(hy2|reality|tu5)).)*$", udp= true}
#  - {name: 🇸🇬Legend节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Legend))^((?!(hy2|reality|tu5)).)*$", udp= true}
# - {name: 🇩🇪Hax节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Hax))^((?!(hy2|reality|tu5)).)*$", udp= true}
#  - {name: 🇺🇲Virtnet节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Virtnet))^((?!(hy2|reality|tu5)).)*$", udp= true}
#  - {name: 🇭🇰Readyserver节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(Readyserver))^((?!(hy2|reality|tu5)).)*$", udp= true}
#  - {name: 🌍Vmess节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(vm|vmess))^((?!(Readyserv)).)*$", udp= true}
  - {name: 🌍Reality节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(reality))^((?!(Readyserv)).)*$", udp= true}
  - {name: 🌍Tuic5节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(tu5))^((?!(Readyserv)).)*$", udp= true}
  - {name: 🌍Hy2节点, type: url-test, include-all: true, tolerance: 30, interval: 300, filter: "(?=.*(hy2))^((?!(Readyserv)).)*$", udp= true}
  - {name: 🎮Blizzard, <<: *pr}
  - {name: 📺YouTube, <<: *pr}
  - {name: 🤖ChatGPT, <<: *pr}
  - {name: 🎵TikTok, <<: *pr}
  - {name: 📲Telegram, <<: *pr}
  - {name: 📺X, <<: *pr}
  - {name: 🐟漏网之鱼, <<: *pr} 

# 规则匹配
rules:
  - RULE-SET,cn_domain,🎯全球直连
  - RULE-SET,itv,🎯全球直连
  - RULE-SET,private_domain,🎯全球直连
  - RULE-SET,blizzard_domain,🎮Blizzard
  - RULE-SET,ai,🤖ChatGPT
  - RULE-SET,github_domain,🚀节点选择
  - RULE-SET,youtube_domain,📺YouTube
  - RULE-SET,google_domain,🚀节点选择
  - RULE-SET,google_ip,🚀节点选择,no-resolve
  - RULE-SET,onedrive_domain,🎯全球直连
  - RULE-SET,microsoft_domain,🎯全球直连
  - RULE-SET,tiktok_domain,🎵TikTok
  - RULE-SET,x_domain,📺X
  - RULE-SET,telegram_domain,📲Telegram
  - RULE-SET,telegram_ip,📲Telegram,no-resolve
  - RULE-SET,gfw_domain,🚀节点选择
  - RULE-SET,geolocation-!cn,🚀节点选择
  - RULE-SET,cn_ip,🎯全球直连,no-resolve
  - MATCH,🐟漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
# 规则匹配
rule-providers: 
  itv: { <<: *class, url: "https://github.com/yuanke99/usually/raw/refs/heads/main/rule"}
  cn_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/cn.mrs"}
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  blizzard_domain: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/blizzard.mrs" }
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  x_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/x.mrs"}
